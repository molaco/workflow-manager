codebase_analysis:
  metadata:
    repository_path: /home/molaco/Documents/japanese
    analysis_date: 2025
    project_type: Rust Workspace (Monorepo)
    primary_language: Rust
  file_statistics:
    by_extension:
      rust:
        count: 53
        total_lines: 18129
        breakdown:
          source_files: 17
          test_files: 3
          example_files: 18
          binary_files: 5
      python:
        count: 11
        total_lines: 5930
        location: SCRIPTS/
      markdown:
        count: 31
        types:
        - documentation
        - planning
        - research_results
      yaml:
        count: 6
        types:
        - templates
        - research_results
        - analysis_outputs
      toml:
        count: 5
        types:
        - cargo_manifests
    total_source_lines: ~24000
    test_to_source_ratio: 3 test files, 18+ example files
  directory_structure:
    level_1_overview: |
      japanese/
      ├── claude-agent-sdk-rust/     # Core SDK library
      ├── workflow-manager/          # TUI application using SDK
      ├── workflow-manager-sdk/      # Workflow SDK library
      ├── workflow-manager-macros/   # Procedural macros
      ├── SCRIPTS/                   # Python utility scripts
      ├── TEMPLATES/                 # YAML templates
      ├── RESULTS/                   # Output artifacts
      ├── DOCS/                      # Documentation
      └── TRASH/TRAHS/              # Archive directories
    major_components:
      claude-agent-sdk-rust:
        purpose: Rust SDK for Claude Agent - core library
        structure:
          src/:
          - client/
          - control/
          - hooks/
          - mcp/
          - message/
          - permissions/
          - transport/
          - error.rs
          - types.rs
          - query.rs
          - lib.rs
          examples/: 18 comprehensive examples
          tests/: 3 integration test files
      workflow-manager:
        purpose: TUI application for workflow orchestration
        structure:
          src/:
          - main.rs
          - lib.rs
          - discovery.rs
          src/bin/:
          - demo_multiphase.rs
          - hooks_demo.rs
          - research_agent.rs
          - simple_echo.rs
          - simple_query.rs
          examples/: Multiple workflow examples
      workflow-manager-sdk:
        purpose: Library for creating workflows
        type: Lightweight SDK
      workflow-manager-macros:
        purpose: Procedural macros for workflow-manager
        type: proc-macro crate
      SCRIPTS:
        purpose: Python automation and utility scripts
        notable_files:
        - tasks.py
        - research.py
        - new_research.py
        - check_yaml.py
        - get_task.py
    special_directories:
      documentation:
      - DOCS/
      - README files per crate
      examples:
      - claude-agent-sdk-rust/examples/ (18 files)
      - workflow-manager/examples/ (6 files)
      tests: claude-agent-sdk-rust/tests/
      templates: TEMPLATES/ (YAML workflow templates)
      outputs:
      - RESULTS/
      - workflow-manager/RESULTS/
      config: .claude/
      archives:
      - TRASH/
      - TRAHS/
  entry_points_and_configuration:
    main_executables:
    - path: workflow-manager/src/main.rs
      type: TUI application
      framework: ratatui + crossterm
    - path: workflow-manager/src/bin/*.rs
      count: 5
      types:
      - demos
      - agents
      - utilities
    - path: SCRIPTS/*.py
      count: 11
      type: Python CLI scripts with uv
    build_configs:
      workspace_manifest:
        path: Cargo.toml
        type: Cargo workspace
        members:
        - workflow-manager
        - workflow-manager-sdk
        - workflow-manager-macros
        - claude-agent-sdk-rust
        shared_dependencies:
        - tokio (async runtime)
        - serde/serde_json (serialization)
        - serde_yaml (YAML support)
        - anyhow (error handling)
        - chrono (datetime)
      crate_manifests:
      - claude-agent-sdk-rust/Cargo.toml:
          name: claude-agent-sdk
          version: 0.1.1
          rust_version: 1.75.0
          type: library
      - workflow-manager/Cargo.toml:
          name: workflow-manager
          version: 0.1.0
          type: binary
          default_run: workflow-manager
      - workflow-manager-sdk/Cargo.toml:
          version: 0.1.0
          type: library
      - workflow-manager-macros/Cargo.toml:
          version: 0.1.0
          type: proc-macro
    ci_cd: None detected (.github/workflows not present)
    documentation_roots:
    - claude-agent-sdk-rust/README.md (comprehensive SDK docs)
    - workflow-manager/PROMPT.md
    - workflow-manager/IMPL.md
    - claude-agent-sdk-rust/examples/README.md
    - DOCS/RUST_SDK/
    - Multiple planning/research .md files at root
    configuration:
    - .claude/settings.local.json (Claude Code settings)
    - .claude/commands/think.md (custom command)
    - TEMPLATES/*.yaml (workflow templates)
  dependencies_and_frameworks:
    external_dependencies:
      async_runtime:
      - tokio (v1, full features)
      - tokio-util (codec support)
      - async-stream
      - async-trait
      - futures
      serialization:
      - serde (with derive)
      - serde_json
      - serde_yaml
      http_clients:
      - reqwest (optional, for MCP HTTP)
      error_handling:
      - thiserror (SDK)
      - anyhow (applications)
      tui_frameworks:
      - ratatui (v0.28)
      - crossterm (v0.28)
      utilities:
      - which (process discovery)
      - jsonschema (validation)
      - fuzzy-matcher (fuzzy search)
      - directories (path management)
      - chrono (datetime)
      - clap (CLI parsing)
      - dotenv (environment variables)
      dev_dependencies:
      - tokio-test
      - tempfile
      - elevenlabs_rs (TTS demos)
      python_dependencies:
      - claude_agent_sdk
      - python-dotenv
      - pyyaml
    internal_module_structure:
      claude-agent-sdk:
        modules:
        - client
        - control
        - hooks
        - mcp
        - message
        - permissions
        - transport
        exports:
        - query
        - ClaudeSDKClient
        - ClaudeAgentOptions
        - Message
        - types
        architecture: Hexagonal/layered
      workflow-manager:
        modules:
        - discovery
        dependencies:
        - claude-agent-sdk
        - workflow-manager-sdk
    framework_detection:
    - Async framework: Tokio (full async/await)
    - TUI framework: Ratatui + Crossterm
    - Protocol: Model Context Protocol (MCP)
    - Agent framework: Claude Agent SDK
    - Python runtime: uv with inline script metadata
  architecture_patterns:
    project_type: Cargo Workspace (Monorepo)
    workspace_structure:
      type: Multi-crate workspace
      pattern: Layered architecture
      layers:
        core_sdk: claude-agent-sdk-rust
        workflow_sdk: workflow-manager-sdk
        proc_macros: workflow-manager-macros
        applications: workflow-manager
        utilities: SCRIPTS/
    module_organization:
      style: Modular with clear separation of concerns
      patterns:
      - Hexagonal architecture (SDK)
      - Plugin-based (MCP tools)
      - Hook-based extensibility
      - Builder pattern (options)
    notable_patterns:
      type_safety:
      - Newtypes for IDs (SessionId, ToolName, RequestId)
      - Strong typing throughout
      - Zero-cost abstractions
      async_architecture:
      - Lock-free design
      - Stream-based communication
      - Concurrent message handling
      error_handling:
      - Result-based with thiserror
      - Rich error context
      - No panics in library code
      extensibility:
      - Hook system for interception
      - Permission callbacks
      - Custom MCP tools
      - Trait-based abstractions
    security_hardening:
    - Environment variable filtering
    - Argument validation (allowlist)
    - Timeout protection
    - Buffer limits
    - No unsafe code (100% safe Rust)
  key_components:
    core_modules:
      claude_agent_sdk:
      - query(): Simple one-shot queries
      - ClaudeSDKClient: Bidirectional communication
      - Hook system: Event interception
      - Permission callbacks: User approval flow
      - MCP server: Custom tool registration
      - Transport layer: Subprocess communication
      - Control protocol: Bidirectional messaging
      workflow_manager:
      - TUI interface: Interactive workflow management
      - Workflow discovery: Dynamic workflow loading
      - History tracking: Field value history
      - Phase/Task/Agent tracking: Hierarchical execution
    public_apis:
      claude-agent-sdk:
      - query(prompt, options) -> Stream<Message>
      - ClaudeSDKClient::new() -> Client
      - SdkMcpServer: Custom tool server
      - Hook registration API
      - Permission callback API
      workflow-manager-sdk:
      - Workflow types
      - WorkflowSource
      - WorkflowStatus
      - FieldType
    notable_implementations:
      message_parsing:
        file: claude-agent-sdk-rust/src/message/parser.rs
        purpose: Parse JSONL messages from Claude
      subprocess_transport:
        file: claude-agent-sdk-rust/src/transport/subprocess.rs
        purpose: Spawn and communicate with claude-code CLI
      mcp_protocol:
        file: claude-agent-sdk-rust/src/mcp/protocol.rs
        purpose: JSONRPC 2.0 protocol implementation
      tui_application:
        file: workflow-manager/src/main.rs
        purpose: Terminal UI with fuzzy search and history
      python_orchestrator:
        file: SCRIPTS/tasks.py
        purpose: Multi-agent task planning orchestrator
  testing_and_quality:
    test_suite:
      unit_tests: 42
      doc_tests: 28
      integration_tests: 3 files
      total: 70+ tests (all passing per README)
    examples:
      claude-agent-sdk: 18 comprehensive examples
      workflow-manager: 6 workflow examples
    documentation:
      api_docs: 6,200+ LOC with inline examples
      readme_files: Multiple per component
      planning_docs:
      - IMPL.md
      - PROMPT.md
      - RESEARCH.md
  notable_features:
  - Full async/await with Tokio
  - Stream-based message handling
  - Type-safe ID system (newtypes)
  - Zero-unsafe Rust code
  - MCP (Model Context Protocol) support
  - Hook system for event interception
  - Permission callback system
  - TUI with fuzzy search
  - Multi-agent orchestration (Python)
  - Workflow templates (YAML)
  - Security hardening (multiple layers)
  development_status:
    claude_agent_sdk:
      version: 0.1.1
      status: Feature complete
      parity: Full parity with Python SDK
    workflow_manager:
      version: 0.1.0
      status: Active development
      features:
      - TUI
      - workflow discovery
      - history tracking
