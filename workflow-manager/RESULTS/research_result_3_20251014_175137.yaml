api_operations_analysis:
  metadata:
    analysis_date: 2025-10-14
    codebase: workflow-manager
    purpose: Define API operations for MCP server and TUI use cases
    
  workflow_discovery:
    operations:
      - name: list_workflows
        description: Get catalog of all available workflows (built-in and user-defined)
        sync_type: synchronous
        returns:
          type: array
          schema:
            id: string
            name: string
            description: string
            source: "enum[BuiltIn, UserDefined]"
        current_implementation: "src/discovery.rs:discover_workflows(), src/main.rs:load_workflows()"
        notes: |
          - Scans ~/.workflow-manager/workflows/ for user workflows
          - Scans ../target/debug for built-in workflows
          - Calls binary with --workflow-metadata flag to extract metadata
          
      - name: get_workflow_metadata
        description: Get detailed metadata for a specific workflow including field schemas
        sync_type: synchronous
        parameters:
          workflow_id: string
        returns:
          type: object
          schema: FullWorkflowMetadata
          fields:
            metadata:
              - id
              - name
              - description
            fields: array of FieldSchema
        current_implementation: Execute binary with --workflow-metadata, parse JSON from stdout
        notes: Each workflow binary implements --workflow-metadata flag via WorkflowDefinition trait
        
  workflow_field_schemas:
    operations:
      - name: get_field_schema
        description: Get schema for workflow input fields with validation rules
        sync_type: synchronous
        parameters:
          workflow_id: string
        returns:
          type: array
          item_schema: FieldSchema
          fields:
            name: string
            field_type: enum
            label: string
            description: string
            cli_arg: string
            required: boolean
            default: optional string
            required_for_phases: optional array of integers
        field_types:
          Text: Simple text input
          Number: "{min, max} constraints"
          FilePath: "{pattern} for filtering"
          Select: "{options} array"
          PhaseSelector: "{total_phases} for multi-phase workflows"
          StateFile: "{pattern, phase} for resuming from intermediate states"
        current_implementation: Part of FullWorkflowMetadata returned by --workflow-metadata
        notes: |
          - Required fields can be phase-conditional via required_for_phases
          - StateFile type allows selecting output from previous phases
          
      - name: validate_workflow_inputs
        description: Validate field values before workflow execution
        sync_type: synchronous
        parameters:
          workflow_id: string
          field_values: object (field_name to value)
        returns:
          valid: boolean
          errors: array of validation errors
        current_implementation: NOT IMPLEMENTED - TUI only checks is_empty() for required fields
        recommendation: |
          Should implement comprehensive validation:
          - Required field checks (with phase-conditional logic)
          - Number range validation
          - File path existence checks
          - Pattern matching for FilePath and StateFile types
          - Select option validation
          
  workflow_execution:
    operations:
      - name: start_workflow
        description: Start workflow execution with provided field values
        sync_type: asynchronous
        parameters:
          workflow_id: string
          field_values: object (field_name to value)
        returns:
          execution_id: string (unique identifier for this run)
          status: WorkflowStatus
        current_implementation: |
          src/main.rs:launch_workflow_in_tab() - spawns process with field values as CLI args
          Binary path: ../target/debug/{workflow_id}
          Args built from field_values using --{field_name} value format
        notes: |
          - Boolean fields: only add flag if value is "true"
          - Process spawned with stdout/stderr pipes
          - Threads created to read output streams
          - Returns immediately after spawn
          
      - name: stop_workflow
        description: Terminate a running workflow
        sync_type: synchronous
        parameters:
          execution_id: string
        returns:
          success: boolean
        current_implementation: "src/main.rs:kill_current_tab() - calls child.kill()"
        notes: Sets status to Failed and adds kill message to output
        
      - name: rerun_workflow
        description: Restart a workflow with same parameters
        sync_type: asynchronous
        parameters:
          execution_id: string
        returns:
          new_execution_id: string
        current_implementation: "src/main.rs:rerun_current_tab()"
        notes: |
          - Kills existing process if running
          - Clears output and phase state
          - Spawns new process with saved field_values
          
  workflow_status:
    operations:
      - name: get_workflow_status
        description: Get current execution status
        sync_type: synchronous
        parameters:
          execution_id: string
        returns:
          status: "enum[NotStarted, Running, Completed, Failed]"
          exit_code: optional integer
          start_time: optional timestamp
        current_implementation: "src/main.rs:poll_all_tabs() - checks child.try_wait()"
        notes: |
          - Status updated by polling process state
          - Completed/Failed determined by exit code
          
      - name: get_workflow_phases
        description: Get hierarchical phase/task/agent structure
        sync_type: synchronous
        parameters:
          execution_id: string
        returns:
          type: array
          schema: WorkflowPhase
          hierarchy:
            phase:
              id: usize
              name: string
              status: "enum[NotStarted, Running, Completed, Failed]"
              tasks: array
              output_files: array of (path, description)
            task:
              id: string
              phase: usize
              description: string
              status: TaskStatus
              agents: array
              messages: array
              result: optional string
            agent:
              id: "string (task_id:agent_name)"
              task_id: string
              name: string
              description: string
              status: AgentStatus
              messages: array
              result: optional string
        current_implementation: "Arc<Mutex<Vec<WorkflowPhase>>> updated by handle_workflow_event()"
        notes: |
          - Built incrementally from WorkflowLog events
          - Provides real-time hierarchical view of execution
          
  workflow_logs:
    operations:
      - name: stream_workflow_logs
        description: Stream structured log events from running workflow
        sync_type: streaming
        parameters:
          execution_id: string
        returns:
          stream: WorkflowLog events
        event_types:
          phase_events:
            - PhaseStarted:
                phase: number
                name: string
                total_phases: number
            - PhaseCompleted:
                phase: number
                name: string
            - PhaseFailed:
                phase: number
                name: string
                error: string
          task_events:
            - TaskStarted:
                phase: number
                task_id: string
                description: string
                total_tasks: number
            - TaskProgress:
                task_id: string
                message: string
            - TaskCompleted:
                task_id: string
                result: string
            - TaskFailed:
                task_id: string
                error: string
          agent_events:
            - AgentStarted:
                task_id: string
                agent_name: string
                description: string
            - AgentMessage:
                task_id: string
                agent_name: string
                message: string
            - AgentCompleted:
                task_id: string
                agent_name: string
                result: string
            - AgentFailed:
                task_id: string
                agent_name: string
                error: string
          state_events:
            - StateFileCreated:
                phase: number
                file_path: string
                description: string
        current_implementation: |
          - Workflows emit via WorkflowLog::emit() to stderr with prefix "__WF_EVENT__:"
          - TUI reads stderr in thread, parses JSON, calls handle_workflow_event()
          - Events update shared Arc<Mutex<Vec<WorkflowPhase>>> state
        protocol: Line-delimited JSON on stderr with magic prefix
        
      - name: get_workflow_output
        description: Get stdout output lines from workflow
        sync_type: streaming_or_snapshot
        parameters:
          execution_id: string
          since_line: optional integer (for incremental reads)
        returns:
          lines: array of strings
          total_lines: integer
        current_implementation: |
          Arc<Mutex<Vec<String>>> read by threads from process stdout
          TUI accesses via workflow_output.lock()
        notes: |
          - Stdout for human-readable output
          - Stderr for structured events
          - Both captured by threads and stored in Arc<Mutex<Vec>>
          
  workflow_results:
    operations:
      - name: get_workflow_results
        description: Access workflow output artifacts and results
        sync_type: synchronous
        parameters:
          execution_id: string
        returns:
          status: WorkflowStatus
          exit_code: optional integer
          output_files: array of path, description, phase
          stdout_lines: array of strings
          phase_results: object mapping task_id to result
        current_implementation: |
          - output_files tracked in WorkflowPhase.output_files
          - Updated by StateFileCreated events
          - Results stored in WorkflowTask.result and WorkflowAgent.result
        notes: |
          - Output files discovered via log_state_file! macro emissions
          - Results optionally included in TaskCompleted/AgentCompleted events
          
  workflow_history:
    operations:
      - name: get_field_history
        description: Get previously used values for workflow fields
        sync_type: synchronous
        parameters:
          workflow_id: string
          field_name: optional string (filter to specific field)
        returns:
          type: object
          schema: map of field_name to array of recent values (max 10)
        current_implementation: |
          src/main.rs WorkflowHistory struct
          Saved to ~/.local/share/workflow-manager/history.json
          Updated on successful workflow completion
        notes: Used for autocomplete and field value suggestions in TUI
        
      - name: get_session_state
        description: Get saved session with open tabs and field values
        sync_type: synchronous
        returns:
          tabs: array of saved tab states
          fields: saved field values per tab
          logs: saved output logs per tab
        current_implementation: |
          src/main.rs:save_session() and restore_session()
          Saved to ~/.local/share/workflow-manager/session.json
          Restored on TUI startup
        notes: Enables resuming TUI state across restarts
        
  tui_interaction_patterns:
    current_flows:
      workflow_selection:
        - User browses workflow list (View::WorkflowList)
        - Views detail page (View::WorkflowDetail) - read-only view of metadata
        - Enters edit mode (View::WorkflowEdit) to configure fields
        
      field_editing:
        - Navigate between fields with up/down arrows
        - Press Enter to edit current field
        - Type value in edit buffer
        - Tab for autocomplete from history or file paths
        - / to open file browser for FilePath/StateFile fields
        - Press Enter to save, Esc to cancel
        
      workflow_execution:
        - Press 'r' from WorkflowEdit to run workflow
        - Launches in new tab (View::Tabs)
        - Tab shows real-time hierarchical progress
        - Can expand/collapse phases, tasks, agents with Space
        - E to expand all, C to collapse all
        - Switch tabs with '[' and ']'
        
      multi_tab_management:
        - Run multiple workflows concurrently in tabs
        - Each tab has independent state and output
        - w to close tab (with confirmation if running)
        - k to kill running workflow
        - r to rerun with same parameters
        
    data_needs_per_stage:
      workflow_list:
        - Workflow catalog (id, name, description, source)
        - Lightweight metadata only
        
      workflow_detail:
        - Full metadata with field schemas
        - Field types and validation rules
        - Default values
        
      workflow_edit:
        - Field schemas for rendering form
        - History values for autocomplete
        - File system access for path fields
        - Current field values in edit buffer
        
      workflow_running:
        - Real-time WorkflowLog event stream
        - Hierarchical phase/task/agent state
        - Stdout output lines
        - Process status (running/completed/failed)
        - Exit code when finished
        - Timestamp for start_time
        
  sync_vs_async_classification:
    synchronous_operations:
      - "list_workflows: Fast directory scan + metadata cache"
      - "get_workflow_metadata: Execute binary with flag, parse JSON"
      - "get_field_schema: Part of metadata"
      - "validate_workflow_inputs: Quick validation checks"
      - "get_workflow_status: Check process state"
      - "get_workflow_phases: Read from shared state"
      - "get_workflow_results: Access stored results"
      - "get_field_history: Read from JSON file"
      - "get_session_state: Read from JSON file"
      - "stop_workflow: Send kill signal"
      
    asynchronous_operations:
      - "start_workflow: Spawn process, return immediately"
      - "rerun_workflow: Kill + spawn new process"
      
    streaming_operations:
      - "stream_workflow_logs: Continuous event stream from stderr"
      - "get_workflow_output: Incremental stdout lines (can also be snapshot)"
      
  mcp_server_recommendations:
    architecture: |
      MCP server should maintain execution state registry:
      - Map execution_id -> {process, field_values, output_state, phase_state}
      - Use tokio::process for async process management
      - WebSocket or SSE for log streaming to clients
      
    api_surface:
      tools:
        - "list_workflows: Returns array of workflow metadata"
        - "get_workflow_schema: Returns field schemas for form generation"
        - "validate_workflow: Client-side validation before submission"
        - "start_workflow: Initiates execution, returns execution_id"
        - "get_workflow_status: Polling endpoint for status"
        - "stop_workflow: Terminates running workflow"
        
      resources:
        - "workflow://{workflow_id}/metadata: Static metadata"
        - "workflow://{workflow_id}/schema: Field schemas"
        - "execution://{execution_id}/status: Current status"
        - "execution://{execution_id}/logs: Log snapshot"
        - "execution://{execution_id}/phases: Hierarchical state"
        - "execution://{execution_id}/output: Stdout lines"
        - "execution://{execution_id}/results: Final artifacts"
        
      prompts:
        - "run_workflow: Interactive prompt to select workflow, fill fields, execute"
        - "resume_workflow: Prompt to select state file and resume from phase"
        
    streaming_strategy: |
      - Use Server-Sent Events (SSE) for log streaming
      - Each execution gets event stream endpoint
      - Stream WorkflowLog JSON events as they arrive
      - Client reconstructs hierarchical state from events
      - Fallback to polling get_workflow_status for simple clients
      
  validation_recommendations:
    implement_validation_api:
      required: true
      reason: Current TUI only checks is_empty(), needs comprehensive validation
      validation_rules:
        required: Check if field is empty
        required_for_phases: Conditional required based on selected phases
        number_range: Validate min/max for Number fields
        file_exists: Check FilePath exists and matches pattern
        state_file_valid: Verify StateFile matches pattern and phase
        select_option: Ensure value is in options array
        phase_selector: "Parse and validate phase range (e.g., \"0,1,2\" or \"0-2\")"
        
    validation_timing:
      - "Client-side: Before showing \"Run\" button as enabled"
      - "Server-side: Before spawning workflow process"
      - Return structured errors with field names and messages
      
  key_insights:
    workflow_protocol:
      - Workflows are standalone binaries with --workflow-metadata flag
      - Field values passed as CLI arguments
      - "Structured logs emitted to stderr with __WF_EVENT__: prefix"
      - Human-readable output on stdout
      - Exit code indicates success/failure
      
    state_management:
      - Phase-based execution with intermediate YAML files
      - Can resume from any phase using StateFile fields
      - TUI tracks output files via StateFileCreated events
      - History saved for autocomplete on successful completion
      
    concurrency_model:
      - Multiple workflows run concurrently in separate processes
      - Each execution has independent stdout/stderr streams
      - "Threads read output and update shared Arc<Mutex<>> state"
      - TUI polls process status on each render loop
      
    extensibility:
      - WorkflowDefinition derive macro for easy workflow creation
      - "Logging macros (log_phase_start!, log_task_complete!, etc.)"
      - Field types support custom validation and UI patterns
      - Discovery mechanism auto-detects new workflows