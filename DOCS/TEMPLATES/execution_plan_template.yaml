# Execution Plan Template
# Defines batches of tasks that can be executed in parallel
# Generated from tasks_overview.yaml based on dependency analysis

execution_plan:
  total_tasks: [NUMBER]
  total_batches: [NUMBER]

  batches:
    - batch_id: 1
      description: "[Brief description of what this batch accomplishes]"
      strategy: "sequential"  # All batches execute sequentially
      tasks:
        - task_id: [NUMBER]
          task_name: "[TASK_NAME]"
          reason: "[Why this task is in this batch - e.g., 'No dependencies' or 'Depends on batch 1']"

      # Tasks within this batch can run in parallel because:
      parallelization_rationale: |
        [Explain why these tasks can run in parallel.
        E.g., "All tasks have no dependencies" or
        "All dependencies from previous batches are satisfied"]

    - batch_id: 2
      description: "[Description]"
      strategy: "sequential"
      tasks:
        - task_id: [NUMBER]
          task_name: "[TASK_NAME]"
          reason: "[Why this task is in this batch]"

      parallelization_rationale: |
        [Rationale]

    # Repeat for each batch

  dependencies_summary:
    # Visual dependency graph (optional)
    graph: |
      [Optional ASCII art or description of dependency relationships
      Example:
      Batch 1: [1] (foundation)
               ↓
      Batch 2: [2, 3, 4] (parallel - all depend on 1)
               ↓
      Batch 3: [5, 6] (parallel - depend on 2,3)
      ]

    critical_path:
      # Longest dependency chain
      - task_id: [NUMBER]
      - task_id: [NUMBER]
      # ...

    parallelization_potential: "[low|medium|high]"
    parallelization_explanation: |
      [Explain the overall parallelization potential.
      E.g., "High - 10 out of 14 tasks can run in parallel across 3 batches"]

  notes:
    - "[Any important notes about execution order]"
    - "[Warnings about circular dependencies if found]"
    - "[Suggestions for dependency optimization]"

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
#
# 1. Input: tasks_overview.yaml with task dependencies
# 2. Analyze: requires_completion_of, enables_start_of, parallel_with
# 3. Output: This execution plan with optimal batching strategy
# 4. Goal: Maximize parallelization while respecting dependencies
#
# Key principles:
# - Tasks with no dependencies go in batch 1
# - Tasks only go in a batch if ALL their dependencies are in previous batches
# - Maximize tasks per batch (more parallelization)
# - Batches execute sequentially, tasks within batch execute in parallel
#
# =============================================================================
